const bcrypt = require("bcrypt");
const asyncHandler = require("express-async-handler");
const User = require("../models/userSchema");
const jwt = require("jsonwebtoken");

const registerUser = asyncHandler(async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      res.status(400).json({ error: "All fields not entered" });
    }

    const userExists = await User.findOne({ username });
    if (userExists) {
      res.status(400).json({ error: "Account with username already made" });
    }
    const salt = await bcrypt.genSalt(10);
    const hashPass = await bcrypt.hash(password, salt);
    const newUser = User.create({ username, password: hashPass });
    if (newUser) {
      return res.status(200).json({
        _id: newUser.id,
        username: newUser.username,
        token: generateToken(newUser.id),
      });
    } else {
      res.status(400).json({ error: "Account could not be created" });
    }
  } catch (err) {
    res.status(400).json({ error: err });
  }
});

const loginUser = asyncHandler(async (req, res) => {
  const { username, password } = req.body;

  User.findOne({ username: username }).then((userDoc) => {
    if (userDoc) {
      if (bcrypt.compareSync(password, userDoc.password)) {
        res.status(201).json({
          _id: userDoc.id,
          username: userDoc.username,
          email: userDoc.email,
          token: generateToken(userDoc.id),
        });
      } else {
        res.status(400).json({ error: "Incorrect Password" });
      }
    } else {
      res.status(400).json({ error: "User not found" });
    }
  });
});

const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: "30d",
  });
};

module.exports = {
  registerUser,
  loginUser,
};
