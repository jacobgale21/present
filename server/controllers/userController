const bcrypt = require("bcrypt");
const asyncHandler = require("express-async-handler");
const User = require("../models/userSchema");
const jwt = require("jsonwebtoken");

const registerUser = asyncHandler(async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      res.status(400).json({ error: "All fields not entered" });
    }

    const userExists = await User.findOne({ username });
    if (userExists) {
      res.status(400).json({ error: "Account with username already made" });
    }
    const salt = await bcrypt.genSalt(10);
    const hashPass = await bcrypt.hash(password, salt);
    const newUser = User.create({ username, password: hashPass });
    if (newUser) {
      return res.status(200).json({
        _id: newUser.id,
        username: newUser.username,
        token: generateToken(newUser.id),
      });
    } else {
      res.status(400).json({ error: "Account could not be created" });
    }
  } catch (err) {
    res.status(400).json({ error: err });
  }
});

const loginUser = asyncHandler(async (req, res) => {
  const { username, password } = req.body;

  User.findOne({ username: username }).then((userDoc) => {
    if (userDoc) {
      if (bcrypt.compareSync(password, userDoc.password)) {
        res.status(200).json({
          _id: userDoc.id,
          username: userDoc.username,
          email: userDoc.email,
          token: generateToken(userDoc.id),
        });
      } else {
        res.status(400).json({ error: "Incorrect Password" });
      }
    } else {
      res.status(400).json({ error: "User not found" });
    }
  });
});

const follow = asyncHandler(async (req, res) => {
  try {
    const sender = await User.findById(req.user.id);
    const receiver = await User.findById(req.params.id);

    const follow = sender.following.includes(req.params.id);

    if (!follow) {
      sender.following.push(req.params.id);
      receiver.followers.push(req.user.id);
    }

    await Promise.all([sender.save(), receiver.save()]);

    res.status(200).json(sender);
  } catch (err) {
    console.log(err);
    res.status(400).json({ error: "Error in editing following", err });
  }
});

const getFollowing = asyncHandler(async (req, res) => {
  try {
    const users = await User.find({
      followers: { $all: [req.user.id] },
    });
    res.status(200).json(users);
  } catch (err) {
    res.status(400).json({ error: "Error in getting following" });
    console.log(err);
  }
});

const getFollowers = asyncHandler(async (req, res) => {
  try {
    const users = await User.find({
      following: { $all: [req.user.id] },
    });
    res.status(200).json(users);
  } catch (err) {
    res.status(400).json({ error: "Error in getting following" });
    console.log(err);
  }
});

const getUsers = asyncHandler(async (req, res) => {
  try {
    const users = await User.find({});
    res.status(200).json(users);
  } catch (err) {
    res.status(400).json({ error: "Could not get all users" });
  }
});

const getNonFollowers = asyncHandler(async (req, res) => {
  try {
    const users = await User.find({
      _id: { $nin: req.user.following },
    });
    res.status(200).json(users);
  } catch (err) {
    res.status(400).json("error in getting non followers");
    console.log(err);
  }
});

const getUser = asyncHandler(async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    res.status(200).json(user);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: "30d",
  });
};

module.exports = {
  registerUser,
  loginUser,
  follow,
  getFollowing,
  getFollowers,
  getUsers,
  getNonFollowers,
  getUser,
};
